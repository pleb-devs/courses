PlebDevs Inicio

Metas
Plebdevs:
Aprende a programar 
Crear aplicaciones Bitcoin/Lightning/nostr
Conviértete en un desarrollador
Metas de Plebdevs:
Ofrecer una visión general sencilla y de alto nivel del camino del desarrollador
Consigue tu configuración/cómoda en el entorno de desarrollo
Experiencia básica en el lenguaje de los cursos
🧑‍💻🤝👨‍💻🤝👩‍💻🤝🧑‍💻🤝👨‍💻🤝👩‍💻🤝🧑‍💻🤝👨‍💻🤝👩‍💻🤝🧑‍💻

De plebe a desarrollador

¿Qué es PlebDev?
I coined the term plebdev about 3 years ago as a framing to help me talk about my developer journey in Bitcoin.
PlebDev es un plebe convertido en desarrollador
Los PlebDevs están en el camino del aprendizaje.
Un PlebDev puede ser alguien que está escribiendo su primer código o alguien que ha estado codificando durante dos años y está trabajando para llegar al siguiente nivel
PlebDevs se centra principalmente en el desarrollo de aplicaciones frente al desarrollo de protocolos (¡aunque la puerta al desarrollo de protocolos siempre está abierta!)
Los PlebDevs adoptan la etiqueta de novato, ser un desarrollador nuevo es 1000 veces mejor que estar al margen
Bitcoin/Lightning/Nostr necesita más Plebdevs!


PlebDevs enfoque del aprendizaje
Bajar la barrera de entrada
Aprendizaje basado en proyectos
Enfoque PMV
Información procesable
Desglose de casi todos los conceptos / términos
Explique / comente casi cada línea de código
Subiendo de nivel juntos
Estar disponibles para la ayuda 1:1
Espere estudiantes de alta agencia


PlebDevs Inicio
Configura tu editor de código

¿Qué es un IDE?
IDE son las siglas de Entorno de Desarrollo Integrado
Es una aplicación de software que ayuda a los programadores a escribir, probar y depurar código
Un IDE típicamente incluye:
Un editor de codigo (para escribir o editar código)
Un compilador o interprete (para correr el código)
Herramientas de depuración (para buscar y corregir errores)
IDEs a menudo proporcionan funciones útiles como finalización de código, resaltado de sintaxis y herramientas de gestión de proyectos

PlebDevs Inicio
Configurar Git / Github

Qué es Git / Github
Git:
Git es un sistema de control de versiones que ayuda a realizar un seguimiento de los cambios en el código a lo largo del tiempo
Permite que varias personas trabajen en el mismo proyecto sin sobrescribir el trabajo de los demás
GitHub:
GitHub es una plataforma basada en la web que utiliza Git para almacenar y compartir código
Proporciona funciones de colaboración adicionales como seguimiento de incidencias, solicitudes de incorporación de cambios y herramientas de gestión de proyectos

¿Por qué usar Github?
Realice fácilmente un seguimiento de las actualizaciones de sus propios proyectos. 
Colabore con otros desarrolladores en sus proyectos u otros proyectos de código abierto. 
Fácil acceso a todo el código fuente abierto del mundo al que puede hacer referencia, aprender y contribuir. 
Abre tu código para recibir comentarios o contribuciones.
Copia de seguridad de todos tus proyectos de código en la nube de forma gratuita. 
Github puede actuar como tu prueba de trabajo, como plebdev, puedes pensar en él como el portafolio de todo tu código, mostrando tu progreso, lo que has hecho y la cantidad de código que has estado sacando.

Terminologia Github
Repository: La carpeta que contiene todos los archivos de código, por lo general, se refiere a todo el proyecto.
Commit: Una confirmación es un cambio guardado o una adición a un repositorio que puede ser local o remoto
Staging: El ensayo significa que ha marcado un número de confirmaciones para enviarlas al repositorio remoto
Push: Una inserción es el acto de enviar tus confirmaciones preconfiguradas locales a tu repositorio de GitHub alojado
Branch: Una rama es una versión del repositorio que difiere del proyecto de trabajo principal.
Pull request/PR: Una solicitud de incorporación de cambios es una solicitud para que una colección de cambios realizados se combine en la rama principal del repositorio
Clone: La clonación consiste simplemente en extraer una copia local de un repositorio remoto
Fork: La bifurcación consiste en tomar una copia de un repositorio remoto que ya existe y alojarla en tu propio github

Instalar Git localmente/conectarse a github
Instalar git https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

Guía de inicio
https://docs.github.com/en/get-started/getting-started-with-git/set-up-git
Pasos:
git config --global user.name "Mona Lisa"
git config --global user.email "TU_EMAIL"
Instalar github cli: https://cli.github.com/
gh auth login (or “npx gh auth login”)

Proceso para enviar código a Github
Realizar un cambio en un archivo en el editor de código
git add . (Cambios en la puesta en escena)
git commit -m”Escribe un mensaje sobre tu cambio aquí”
git push
Archivos                  Área                             Tu Pc    
a confirmar      de preparación 

Proceso para extraer código de Github
SI tiene un repositorio en su máquina local
git pull
SI NO tiene repositorio
git clone https://github.com/name/repo.git
Tu Pc

PlebDevs Inicio
HTML

Qué es HTML / CSS
Qué es HTML y CSS?
HTML (Lenguaje de marcado de hipertexto) es el lenguaje de marcado estándar para crear páginas web.
CSS (Hojas de estilo en cascada) es el lenguaje utilizado para diseñar el documento HTML.
Lo que aprenderás:
Etiquetas HTML básicas y sus funciones. 
Cómo construir la estructura de una página web con HTML 
Cómo integrar CSS para mejorar la apariencia de tu página web. 
Consejos rápidos sobre técnicas de diseño con CSS.


HTML estructura

Plantilla HTML básica
Comience con <!DOCTYPE html> para definir el tipo de documento.
<html> para encerrar todo el contenido HTML.
Incluír <html>, adentro:
<head> sección:
<title> para establecer el título de la página.
<body> sección:
Aquí es donde va todo el contenido visible de la página.
https://www.freecodecamp.org/news/basic-html5-template-boilerplate-code-example/

Agregar contenido!
Encabezados: Añade un encabezado principal con <h1>Tu nombre</h1> y un subencabezado <h2>Sobre mí</h2>.
Párrafos: Descríbete a ti mismo o a tu proyecto en un párrafo <p>Esta es una breve descripción sobre mí.</p>.
Imágenes: Inserta una imagen utilizando <img src=«imagen.jpg»>.
Estos valores adicionales dentro de la etiqueta img («src» y «width») se denominan «atributos».
Todas las etiquetas HTML tienen atributos y añaden o modifican el comportamiento de las etiquetas
<body>
   <h2>About Me</h2>
   <p>Hi, I'm a beginner learning web development. This is my first webpage!</p>
  
   <h2>A Funny Picture</h2>
   <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPDkcqjFiI0DCMU_VGSk-sTo0_0Bovwofb7hy1vzRm6g&s" width="200">
</body>

EL div y “Semántica HTML”
Comprendiendo <div>
Elemento contenedor utilizado para agrupar elementos HTML.
Se utiliza normalmente para estilizar o maquetar con CSS.
Ejemplo: <div class=«header»>Content for header here</div>.
Qué es el HTML semántico
Los elementos HTML semánticos describen claramente su significado de forma legible por humanos y máquinas.
Ayudan al SEO, a la accesibilidad y a mantener la legibilidad del sitio.
Ejemplos de etiquetas HTML semánticas
<header>: Contenido introductorio o enlaces de navegación.
<footer>: Pie de página de un documento o sección.
<article>: Contenido independiente y autocontenido.
<section>: Define secciones en un documento.
<nav>: Enlaces de navegación.
Sustituir lo no semántico por lo semántico
En lugar de utilizar <div> no semánticos en todas partes, utilice etiquetas semánticas donde corresponda.
Ejemplo de conversión::
Antes: <div class="header"></div>
Despues: <header></header>

El div y “Semánticas HTML”
<body>
   <!-- Header section -->
   <header>
     <h1>Welcome to My First Webpage!</h1>
     <p>This is a simple project to get started with HTML and CSS.</p>
   </header>
    <!-- Main content section -->
   <main>
     <h2>About Me</h2>
     <p>Hi, I'm a beginner learning web development. This is my first webpage!</p>
      <h2>A Funny Picture</h2>
     <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTPDkcqjFiI0DCMU_VGSk-sTo0_0Bovwofb7hy1vzRm6g&s"
       alt="A funny picture" width="200">
   </main>
    <!-- Footer section -->
   <footer>
     <p>&copy; 2023 Your Name. All rights reserved.</p>
   </footer>
</body>

PlebDevs Inicio
CSS

Qué es CSS?
Definición: CSS es un lenguaje de hojas de estilo utilizado para describir la presentación de un documento escrito en HTML
Funcionalidad:
Estilismo: Allows you to set the visual style of web pages, including fonts, colors, margins, lines, height, width, background images, and other aspects of design.
Formato: Permite posicionar elementos en una página y definir su tamaño y espaciado, utilizando técnicas como Flexbox y Grid.
Separación de contenido y presentación:
CSS mantiene el estilo de presentación de las páginas separado del contenido, lo que mejora la accesibilidad, ofrece más flexibilidad en la presentación y reduce la complejidad en el mantenimiento del sitio.
Orden en cascada:
Las reglas CSS se aplican en cascada, lo que significa que la prioridad de las reglas determina qué estilos se aplican a los elementos. Esta cascada combina estilos de diversas fuentes (como estilos predeterminados del navegador, estilos definidos por el usuario y estilos definidos por el desarrollador) en un diseño final.
CSS SELECTORES
CSS PROPIEDADES
Selector
Propiedad                       Valor propiedad
Declaracion

Vincular CSS a su archivo HTML

Vamos a añadir algunos css para la cabecera
/* Header styles */
header {
 background-color: #333;
 color: white;
 padding: 20px;
 text-align: center;
}

El modelo de caja

CSS Unidad

CSS Ejemplos

Especificidad CSS
La especificidad pone la «cascada» en CSS
https://www.w3schools.com/css/css_specificity.asp
Mayor a Menor

CSS en línea VS hojas de estilo
Separación de preocupaciones: Mantiene separados el contenido (HTML) y la presentación (CSS), lo que mejora su mantenimiento.
Reutilización: Los estilos pueden aplicarse a varios elementos sin que se repitan.
Mantenimiento más sencillo: Los cambios pueden realizarse en un solo lugar para afectar a varias páginas.
Consistencia: Garantiza un estilo uniforme en todo el sitio web.
Caché: Los navegadores pueden almacenar en caché hojas de estilo externas, lo que mejora los tiempos de carga.
HTML más limpio: Hace que el HTML sea más legible sin estilos incrustados.
Capacidad de respuesta: Diseño adaptable más fácil de implementar con media queries.
Control de especificidad: Permite una mejor gestión de la especificidad y la cascada de estilos.

Diseños CSS con Flexbox
Introducción a Flexbox
Una potente herramienta de maquetación que ordena los elementos secuencialmente en una fila o columna.
Simplifica la alineación vertical y horizontal del contenido.
Configuración básica
Añade display: flex; a un elemento contenedor.
Los elementos del interior se vuelven flexibles automáticamente y se ajustan al tamaño del contenedor.

Flexbox es increible!
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://flexboxfroggy.com/

body {
 min-height: 100vh;
 margin: 0;
 font-family: Arial, sans-serif;
 background-color: #f0f0f0;
 display: flex;
 flex-direction: column;
}

header {
 background-color: #333;
 color: white;
 padding: 20px;
 text-align: center;
}

main {
 max-width: 800px;
 margin: 0 auto;
 padding: 20px;
 flex: 1;
}
Añade el resto del css y ¡vamos a recorrerlo!

h2 {
 color: #333;
}

img {
 display: block;
 margin: 20px auto;
 max-width: 100%;
 height: auto;
}

footer {
 background-color: #333;
 color: white;
 padding: 10px;
 text-align: center;
}
Añade el resto del css y ¡vamos a recorrerlo!

PlebDevs Inicio
JavaScript

Qué es JavaScript
JavaScript es el lenguaje de la web. Se extiende a servidores, sitios web, aplicaciones, juegos y mucho más.

JS hoja de trucos

Basic Data types
Tipo de datos básicos
Explicación:
- JavaScript tiene varios tipos básicos de datos, incluidos números, booleanos y cadenas.
- Los números pueden ser enteros o valores de coma flotante..
- El valor booleano (Boolean) indica verdadero  o falso.
- Las cadenas son secuencias de caracteres rodeadas por comillas únicas o dobles.


Estructuras de datos básicas
Objetos
Explicación:
- Los objetos en JavaScript son pares clave-valor encerrados entre llaves {}.
- Cada par clave-valor está separado por una coma.
- Las claves son cadenas (o símbolos) y los valores pueden ser de cualquier tipo de datos.
 

Estructuras de datos básicas
Matrices (Arrays)
Explicación:
- Las matrices en JavaScript son colecciones ordenadas de elementos encerrados entre corchetes [ ].
- Los elementos de una matriz se separan mediante comas.
-Se puede acceder a los elementos de una matriz utilizando su índice, empezando por 0.


Functions
Funciones
Explicación:
- Las funciones en JavaScript son bloques de código reutilizables que realizan una tarea específica.
Pueden recibir parámetros (entradas) y devolver un valor.
- Las funciones se definen con la palabra clave function, seguida del nombre de la función y un par de paréntesis ( ). 
El cuerpo de la función se encierra entre llaves { }.


Functions
Sentencias condicionales
Explicación:
- Las sentencias condicionales permiten ejecutar diferentes bloques de código en función de determinadas condiciones.
La sentencia if comprueba una condición, y si es verdadera, se ejecuta el bloque de código dentro del bloque if.
Si la condición es falsa, se ejecuta el bloque de código dentro del bloque else (si está presente).


Construyamos una página web que muestre el precio del Bitcoin
Con JavaScript


Crear un nuevo repositorio para nuestro proyecto JS
<!DOCTYPE html>
<html lang="en">
 <head>
   <meta charset="UTF-8" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <meta http-equiv="X-UA-Compatible" content="ie=edge" />
   <title>JS</title>
   <link rel="stylesheet" href="style.css" />
   <script src="index.js" defer></script>
 </head>

 <body>
   <h1>Current Bitcoin Price</h1>
   <p>Date and Time: <span id="datetime"></span></p>
   <p>The current price of Bitcoin is: <span id="price"></span></p>
   <select id="currency-selector">
     <option value="USD">USD</option>
     <option value="EUR">EUR</option>
     <!-- Add more currencies as needed -->
   </select>
   <button id="refresh-button">Refresh Price</button>
   <button id="toggle-button">Toggle Price Visibility</button>
 </body>
</html>
index.html

Cómo se escribe JavaScript en una página web
Defina su JS directamente en la etiqueta script

O

Defina una etiqueta script que apunte a un archivo JS

function updateDateTime() {
   // Get the element where the date/time will be displayed
   const dateTimeElement = document.getElementById("datetime");
   // Get the current date and time as a localized string
   const currentDateTime = new Date().toLocaleString();
   // Update the date/time display
   dateTimeElement.textContent = currentDateTime;
}
// Wait for the DOM to be fully loaded before setting up event listeners
document.addEventListener("DOMContentLoaded", function() {
   setInterval(updateDateTime, 1000);     // Update date/time every second

   // Initial calls to display data immediately
   updateDateTime();
});

Crear una función para obtener la fecha y hora actuales

El DOM (Modelo de objetos del documento)
El DOM es una interfaz de programación para documentos HTML y XML.
Representa la estructura de una página web como una jerarquía de objetos en forma de árbol.
Cada objeto del árbol DOM se denomina nodo y representa un elemento HTML, un atributo o un contenido de texto.

Acceso y manipulación del DOM


JavaScript proporciona varios métodos y propiedades para acceder a los elementos del DOM y manipularlos.
Puede seleccionar elementos basándose en su ID, clase, nombre de etiqueta u otros atributos.

Acceso y manipulación del DOM
Una vez seleccionado un elemento, puede modificar su contenido, atributos, estilos o incluso crear y añadir nuevos elementos.

Handling User Interactions with Event Listeners
Los escuchadores de eventos permiten responder a las acciones y eventos de los usuarios.
Ejemplos de eventos: clic, hover, pulsación de tecla, envío de formulario, etc.
Los escuchadores de eventos se adjuntan a elementos DOM específicos
Cuando se produce el evento especificado en el elemento, se ejecuta la función asociada.

Gestión de interacciones/usuarios con receptores de eventos
Docs para escuchadores de eventos: https://www.w3schools.com/js/js_htmldom_eventlistener.asp

Qué es fetch?
Fetch es una moderna API de JavaScript para realizar peticiones HTTP desde el navegador. Proporciona una forma más directa y flexible de enviar peticiones y gestionar respuestas en comparación con el antiguo enfoque XMLHttpRequest (XHR).
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch

Obtener el precio de Bitcoin cada 3 segundos
// Global variable to store the currently selected currency
let currentCurrency = "USD";

async function fetchBitcoinPrice() {
   // Construct the API URL with the current currency
   const apiUrl = `https://api.coinbase.com/v2/prices/BTC-${currentCurrency}/spot`;

   try {
       // Fetch data from the API
       let response = await fetch(apiUrl);
       // Parse the JSON response
       let data = await response.json();
       // Extract the Bitcoin price from the response
       const bitcoinPrice = data.data.amount;
      
       // Update the price display on the webpage
       document.getElementById("price").textContent = `${currentCurrency} $${bitcoinPrice}`;
   } catch (error) {
       // Log any errors that occur during the fetch operation
       console.error("Error fetching Bitcoin price:", error);
   }
}


// Wait for the DOM to be fully loaded before setting up event listeners
document.addEventListener("DOMContentLoaded", function() {
   // Set up intervals for automatic updates
   setInterval(fetchBitcoinPrice, 3000);  // Update price every 3 seconds
   setInterval(updateDateTime, 1000);     // Update date/time every second

   // Initial calls to display data immediately
   fetchBitcoinPrice();
   updateDateTime();
});

Obtener el precio de Bitcoin cada 3 segundos

function togglePriceVisibility() {
   // Get the element that displays the price
   const priceElement = document.getElementById("price");
   // Toggle between hiding and showing the price
   if (priceElement.style.display === "none") {
       priceElement.style.display = "inline";
   } else {
       priceElement.style.display = "none";
   }
}
Crear una función para mostrar y ocultar el precio

// Wait for the DOM to be fully loaded before setting up event listeners
document.addEventListener("DOMContentLoaded", function() {
   // Get references to the relevant DOM elements
   const toggleButton = document.getElementById("toggle-button");

   // Set up event listener for the toggle visibility button
   toggleButton.addEventListener("click", togglePriceVisibility);

   // Set up intervals for automatic updates
   setInterval(fetchBitcoinPrice, 3000);  // Update price every 3 seconds
   setInterval(updateDateTime, 1000);     // Update date/time every second

   // Initial calls to display data immediately
   fetchBitcoinPrice();
   updateDateTime();
});
Crear una función para mostrar y ocultar el precio

// Wait for the DOM to be fully loaded before setting up event listeners
document.addEventListener("DOMContentLoaded", function() {
   // Get references to the relevant DOM elements
   const currencySelector = document.getElementById("currency-selector");
   const toggleButton = document.getElementById("toggle-button");

   // Set up event listener for currency selection changes
   currencySelector.addEventListener("change", function () {
       // Update the current currency when the selection changes
       currentCurrency = this.value;
       // Fetch and display the price for the new currency
       fetchBitcoinPrice();
   });

   // Set up event listener for the toggle visibility button
   toggleButton.addEventListener("click", togglePriceVisibility);

   // Set up intervals for automatic updates
   setInterval(fetchBitcoinPrice, 3000);  // Update price every 3 seconds
   setInterval(updateDateTime, 1000);     // Update date/time every second

   // Initial calls to display data immediately
   fetchBitcoinPrice();
   updateDateTime();
});

Hacer funcional el selector de divisas

// Wait for the DOM to be fully loaded before setting up event listeners
document.addEventListener("DOMContentLoaded", function() {
   // Get references to the relevant DOM elements
   const currencySelector = document.getElementById("currency-selector");
   const refreshButton = document.getElementById("refresh-button");
   const toggleButton = document.getElementById("toggle-button");

   // Set up event listener for currency selection changes
   currencySelector.addEventListener("change", function () {
       // Update the current currency when the selection changes
       currentCurrency = this.value;
       // Fetch and display the price for the new currency
       fetchBitcoinPrice();
   });

   // Set up event listener for the refresh button
   refreshButton.addEventListener("click", fetchBitcoinPrice);

   // Set up event listener for the toggle visibility button
   toggleButton.addEventListener("click", togglePriceVisibility);

   // Set up intervals for automatic updates
   setInterval(fetchBitcoinPrice, 3000);  // Update price every 3 seconds
   setInterval(updateDateTime, 1000);     // Update date/time every second

   // Initial calls to display data immediately
   fetchBitcoinPrice();
   updateDateTime();
});

Hacer funcional el selector de divisas
Traducción: ⚡ Cryptohm@coinos.io
